#include <WiFi.h>
#include <HTTPClient.h>
#include <WebServer.h>
#include <ArduinoJson.h>
#include <Arduino.h>
#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7789.h> // Hardware-specific library for ST7789
#include <SPI.h>             // Arduino SPI library
StaticJsonDocument<250> jsonDocument;
char buffer[250];
// ST7789 TFT module connections

// 'ruter_600p', 77x66px
const unsigned char ruter_600p[] PROGMEM = {
    0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
    0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
    0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
    0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0x00, 0x02, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xcf, 0x00, 0x02, 0x00,
    0xff, 0xfc, 0x7f, 0xff, 0xff, 0xf3, 0xcf, 0x00, 0x02, 0x38, 0x7f, 0xfc, 0x7f, 0xff, 0xff, 0xf3,
    0x8f, 0x00, 0x02, 0x3c, 0x7f, 0xfc, 0x7f, 0xff, 0xff, 0x00, 0x01, 0x00, 0x02, 0x3c, 0x63, 0x98,
    0x1c, 0x1e, 0x47, 0x00, 0x03, 0x00, 0x02, 0x3c, 0x63, 0x98, 0x18, 0x0e, 0x07, 0xe3, 0x9f, 0x00,
    0x02, 0x00, 0xe3, 0x9c, 0x79, 0xc6, 0x3f, 0xe7, 0x9f, 0x00, 0x02, 0x01, 0xe3, 0x9c, 0x71, 0xc6,
    0x3f, 0xe7, 0x1f, 0x00, 0x02, 0x31, 0xe3, 0x9c, 0x70, 0x06, 0x3f, 0xe7, 0x3f, 0x00, 0x02, 0x31,
    0xe3, 0x9c, 0x71, 0xfe, 0x3e, 0x00, 0x07, 0x00, 0x02, 0x38, 0xe3, 0x9c, 0x71, 0xfe, 0x3e, 0x00,
    0x07, 0x00, 0x02, 0x38, 0xe1, 0x1c, 0x78, 0xce, 0x3f, 0xcf, 0x3f, 0x00, 0x02, 0x3c, 0x70, 0x1e,
    0x18, 0x0e, 0x3f, 0xce, 0x3f, 0x00, 0x02, 0x3c, 0x78, 0x9f, 0x1e, 0x1e, 0x3f, 0xce, 0x7f, 0x00,
    0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
    0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
    0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
    0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0x00};

#define TFT_MOSI 23 // SDA Pin on ESP32
#define TFT_SCLK 18 // SCL Pin on ESP32
#define TFT_CS 15   // Chip select control pin
#define TFT_DC 2    // Data Command control pin
#define TFT_RST 4   // Reset pin (could connect to RST pin)

// Initialize Adafruit ST7789 TFT library
Adafruit_ST7789 tft = Adafruit_ST7789(TFT_CS, TFT_DC, TFT_RST);
float p = 3.1415926;

const char *SSID = "SSID";
const char *PWD = "PASSWORD";
const String endpoint = "ADD THE CLOUDFLARE WORKERS ENDPOINT HERE"
    // Web server running on port 80
    WebServer server(80);
void connectToWiFi()

{
  Serial.print("Connecting to ");
  Serial.println(SSID);

  WiFi.begin(SSID, PWD);

  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(500);
    // we can even make the ESP32 to sleep
  }

  Serial.print("Connected. IP: ");
  Serial.println(WiFi.localIP());
}

void getBusData()
{
  HTTPClient http;

  http.begin(endpoint);      // Specify the URL
  int httpCode = http.GET(); // Make the request

  if (httpCode > 0)
  { // Check for the returning code

    String payload = http.getString();
    Serial.println(payload);
    deserializeJson(jsonDocument, payload);
  }

  else
  {
    Serial.println("Error on HTTP request");
  }

  http.end(); // Free the resources

  // Get RGB components

  int buss34 = jsonDocument["34"];
  int buss20 = jsonDocument["20"];
  int buss54 = jsonDocument["54"];
  int buss37 = jsonDocument["37"];
  // Respond to the client
  tft.fillScreen(ST77XX_BLACK);
  tft.setCursor(0, 0);
  tft.setTextColor(ST77XX_WHITE);
  tft.setTextSize(3);
  tft.print("Buss 34:");
  tft.print(buss34);
  tft.print("min");
  tft.setCursor(0, 30);
  tft.print("Buss 20:");
  tft.print(buss20);
  tft.print("min");
  tft.setCursor(0, 60);
  tft.print("Buss 54:");
  tft.print(buss54);
  tft.print("min");
  tft.setCursor(0, 90);
  tft.print("Buss 37:");
  tft.print(buss37);
  tft.print("min");
  tft.setCursor(0, 120);
  tft.setCursor(0, 150);
  tft.drawBitmap(80, 150, ruter_600p, 77, 66, ST77XX_WHITE);

  server.send(200, "application/json", "{}");
}

void setup(void)
{
  Serial.begin(9600);

  // if the display has CS pin try with SPI_MODE0
  tft.init(240, 240, SPI_MODE2); // Init ST7789 display 240x240 pixel
  // if the screen is flipped, remove this command
  tft.setRotation(2);

  uint16_t time = millis();
  tft.fillScreen(ST77XX_BLACK);
  time = millis() - time;
  delay(500);
  connectToWiFi();
  delay(500);

  tft.print(WiFi.localIP());
  delay(500);
}

void loop()
{
  getBusData();
  delay(45000);
}

void testdrawtext(char *text, uint16_t color)
{
  tft.print(text);
}
